{"version":3,"sources":["components/Quote.js","components/GenerateButton.js","components/TwitterButton.js","components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","react_default","a","createElement","id","className","quote","author","GenerateButton","onClick","click","styles","background","borderRadius","color","borderWidth","borderStyle","borderColor","marginLeft","TwitterButton","href","style","data-show-count","async","src","charSet","boxStyles","width","margin","marginTop","padding","backgroundColor","quoteContainerStyles","QuoteBox","state","quotes","currQuote","currAuthor","generateNewQuote","num","Math","floor","random","_this","setState","src_components_Quote","this","components_GenerateButton","components_TwitterButton","Component","App","components_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.738eeab6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Quote.css'\r\n\r\nconst Quote = (props) => {\r\n    return (\r\n        <div>\r\n            <blockquote id=\"text\" className=\"quote\">\"{props.quote}\"</blockquote>\r\n            <p id=\"author\" className=\"author\">- {props.author}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Quote;","import React from 'react';\r\n\r\nconst GenerateButton = (props) => {\r\n    return (\r\n        <div>\r\n            <button id=\"new-quote\" onClick={props.click} className=\"btn btn-success\">Generate new</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GenerateButton;","import React from 'react';\r\n\r\nconst styles = {\r\n    background: \"#00ACEE\",\r\n    borderRadius: 5,\r\n    color: \"#fff\",\r\n    borderWidth: 1,\r\n    borderStyle: \"solid\",\r\n    borderColor: \"#0075a2\",\r\n    marginLeft: 10\r\n}\r\n\r\nconst TwitterButton = () => {\r\n    return (\r\n        <div>\r\n            <a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" style={styles} className=\"btn\" data-show-count=\"false\"><i className=\"fab fa-twitter-square\"></i> Tweet</a><script async src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TwitterButton;","import React, { Component } from 'react';\r\n\r\nimport Quote from './Quote'\r\nimport GenerateButton from './GenerateButton'\r\nimport TwitterButton from './TwitterButton'\r\n\r\nconst boxStyles = {\r\n    width: 500,\r\n    margin: \"auto\",\r\n    borderRadius: 8,\r\n    marginTop: 100,\r\n    padding: 20,\r\n    backgroundColor: \"#fff\"\r\n}\r\n\r\nconst quoteContainerStyles = {\r\n    padding: 10,\r\n    width: 500,\r\n    margin: \"auto\",\r\n}\r\n\r\nclass QuoteBox extends Component {\r\n    state = {\r\n        quotes: [\r\n            { author: 'Charlie Chaplin', quote: 'You have to believe in yourself, that\\'s the secret. Even when I was in the orphanage, when I was roaming the street trying to find enough to eat, even then I thought of myself as the greatest actor in the world.' },\r\n            { author: 'Henry Ward Beecher', quote: 'It gives one a sudden start in going down a barren, stoney street, to see upon a narrow strip of grass, just within the iron fence, the radiant dandelion, shining in the grass, like a spark dropped from the sun.' },\r\n            { author: 'Francis Scott Key Fitzgerald', quote: 'The hangover became a part of the day as well allowed-for as the Spanish siesta.' },\r\n            { author: 'Charles Kingsley', quote: 'All that we need to make us really happy is something to be enthusiastic about.' },\r\n            { author: 'George Bernard Shaw', quote: 'The more things a man is ashamed of, the more respectable he is.' },\r\n            { author: 'Richard Lee Rhodes', quote: 'The physicist Leo Szilard once announced to his friend Hans Bethe that he was thinking of keeping a diary: \\'I don\\'t intend to publish it: I\\'m merely going to record the facts for the information of God\\' \\'Don\\'t you think God knows the facts?\\' Bethe asked. \\'Yes,\\' said Szilard, \\'He knows the facts, but He does not know THIS VERSION OF THE FACTS.\\'' },\r\n            { author: 'J. E. Littlewood', quote: 'I recall once saying that when I had given the same lecture several times I couldn\\'t help feeling that they really ought to know it by now.' },\r\n            { author: 'Steven Wright', quote: 'I told her I knew when I was going to die because my birth certificate had an expiration date on it.' },\r\n            { author: 'James R. Newman', quote: 'The most painful thing about mathematics is how far away you are from being able to use it after you have learned it.' },\r\n            { author: 'Adlai Ewing Stevenson', quote: 'I have been told that one of the reasons the astronomers of the world cooperate is the fact that there is no one nation from which the entire sphere of the sky can be seen. Perhaps there is in that fact a parable for national statesmen, whose political horizons are all too often limited by national horizons.' },\r\n            { author: 'Henry David Thoreau', quote: 'For every thousand hacking at the leaves of evil, there is one striking at the root.' },\r\n            { author: 'Theodore Parker', quote: 'Truth never yet fell dead in the streets; it has such affinity with the soul of man, the seed however broadcast will catch somewhere and produce its hundredfold.' },\r\n            { author: 'Charles Dickens', quote: 'No one is useless in this world who lightens the burden of it to anyone else.' },\r\n            { author: 'John Locke', quote: 'That which is static and repetitive is boring. That which is dynamic and random is confusing. In between lies art.' },\r\n            { author: 'Ambrose Gwinett Bierce', quote: 'MAD, adj. Affected with a high degree of intellectual independence; at odds with the majority; in short, unusual. It is noteworthy that persons are pronounced mad by officials destitute of evidence that themselves are sane.' },\r\n            { author: 'Lemuel K. Washburn', quote: 'We cannot go ahead without leaving something behind' },\r\n            { author: 'Phillips Brooks', quote: 'We are haunted by an ideal life, and it is because we have within us the beginning and the possibility of it.' },\r\n            { author: 'Ralph Waldo Emerson', quote: 'Striving is perhaps the one and only true elixir, for while we converse with what is above us, we do not grow old, but grow young.' },\r\n            { author: 'Elliot Easton', quote: 'I think one thing we went through was common to a lot of people: You work your whole life to achieve something, then you achieve it and find out that you still have good days and bad days. So you start thinking, \\'Is that all there is?\\' After a while you calm down and get back to work.' },\r\n            { author: 'William Butler Yeats', quote: 'Grant me an old man\\'s frenzy, Myself must I remake Till I am Timon and Lear Or that William Blake Who beat upon the wall Till Truth obeyed his call.' }\r\n        ],\r\n        currQuote: 'We cannot go ahead without leaving something behind',\r\n        currAuthor: 'Lemuel K. Washburn'\r\n    }\r\n\r\n    generateNewQuote = () => {\r\n        let num = Math.floor(Math.random() * 20)\r\n        this.setState({\r\n            currAuthor: this.state.quotes[num].author,\r\n            currQuote: this.state.quotes[num].quote\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"quote-box\" style={boxStyles}>\r\n                <Quote quote={this.state.currQuote} author={this.state.currAuthor} />\r\n                <div className=\"row\" style={quoteContainerStyles}>\r\n                    <GenerateButton click={this.generateNewQuote} />\r\n                    <TwitterButton />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteBox;","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteBox from './components/QuoteBox'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <QuoteBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}